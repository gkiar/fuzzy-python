name: Docker build and push

on:
  push:
    branches: ['*']
  pull_request_target:
    types: [opened, edited, synchronize, assigned]

jobs:
  lapack:
    runs-on: ubuntu-20.04
    env:
      RUN_IF_CHANGED: docker
    strategy:
      max-parallel: 1
      matrix:
        include:
          - DOCKER_FROM: ""
            DOCKER_TO: fuzzy_v0.4.1-lapack-un
            DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-un
            DOCKER_FILE: ./docker/base/Dockerfile.ubuntu20.04-lapack

          - DOCKER_FROM: fuzzy_v0.4.1-lapack-un
            DOCKER_TO: fuzzy_v0.4.1-lapack-python3.8.5
            DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-python3.8.5
            DOCKER_FILE: ./docker/level1/Dockerfile.ubuntu20.04-python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for file changes
        uses: jitterbit/get-changed-files@v1
        id: changes

      - name: Print list of changed files
        run: echo ${{ steps.changes.outputs.all }}

      - name: If Dockerfiles have been updated, cancel running upstream jobs
        if: contains(steps.changes.outputs.all, ${{ env.RUN_IF_CHANGED }})
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Determine if images will be pushed to Docker, and login as needed
        if: contains(steps.changes.outputs.all, ${{ env.RUN_IF_CHANGED }})
        run: |
          if ([ "${{github.event_name}}" == "push" ] && [ "${{github.ref}}" == "refs/heads/master" ])
          then
              echo This is a push to master: we will push to Docker Hub
              echo "PUSH=true" >> "$GITHUB_ENV"
              docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          else
              echo This is a PR or non-master push: we will not push to Docker Hub
              echo "PUSH=false" >> "$GITHUB_ENV"
          fi

      - name: Download Docker artifacts, if available
        if: |
          [ ! -z ${{ matrix.DOCKER_FROM }} ] &&
          contains(steps.changes.outputs.all, ${{ env.RUN_IF_CHANGED }})
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.DOCKER_FROM }}
          path: /tmp

      - name: (optionally) Load, Build, and (optionally) Push Docker image
        if: contains(steps.changes.outputs.all, ${{ env.RUN_IF_CHANGED }})
        run: |
          if [ ! -z ${{ matrix.DOCKER_FROM }} ]
          then
            docker load --input /tmp/${{ matrix.DOCKER_FROM }}.tar
            docker image ls -a
          fi

          docker build ./ -t ${{ matrix.DOCKER_IMAGE }} \
                          -f ${{ matrix.DOCKER_FILE }}

          docker save -/tmp/${{ matrix.DOCKER_TO }}.tar

          if ${{ env.PUSH }}
          then
            docker push ${{ matrix.DOCKER_IMAGE }}
          fi

      - name: Upload Docker artifacts
        if: contains(steps.changes.outputs.all, ${{ env.RUN_IF_CHANGED }})
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.DOCKER_TO }}
          path: /tmp/${{ matrix.DOCKER_TO }}.tar

  python:
    needs: lapack
    runs-on: ubuntu-20.04
    env:
      DOCKER_FROM: fuzzy_v0.4.1-lapack-un
      DOCKER_TO: fuzzy_v0.4.1-lapack-python3.8.5
      DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-python3.8.5
      DOCKER_FILE: ./docker/level1/Dockerfile.ubuntu20.04-python
      PUSH: false
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check for Dockerfile changes
        uses: jitterbit/get-changed-files@v1
        id: changes
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOCKER_FROM }}
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_FROM }}.tar
          docker image ls -a
      - name: Build and push
        if: contains(steps.changes.outputs.all, 'docker')
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ${{ env.DOCKER_FILE }}
          tags: ${{ env.DOCKER_IMAGE }}
          push: ${{ env.PUSH }}
          load: true
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_TO }}.tar
          cache-from: type=local,src=/tmp/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DOCKER_TO}}
          path: /tmp/${{ env.DOCKER_TO}}.tar
      - name: Image digest
        if: contains(steps.changes.outputs.all, 'docker')
        run: echo ${{ steps.docker_build.outputs.digest }}

  numpy:
    needs: python
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-python3.8.5-numpy
      DOCKER_FILE: ./docker/level2/Dockerfile.ubuntu20.04-python-numpy
      PUSH: false
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check for Dockerfile changes
        uses: jitterbit/get-changed-files@v1
        id: changes
      - name: Build and push
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ${{ env.DOCKER_FILE }}
          tags: ${{ env.DOCKER_IMAGE }}
          push: ${{ env.PUSH }}
          cache-from: env.DOCKER_IMAGE
      - name: Image digest
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        run: echo ${{ steps.docker_build.outputs.digest }}

  scipy:
    needs: numpy
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-python3.8.5-numpy-scipy
      DOCKER_FILE: ./docker/level3/Dockerfile.ubuntu20.04-python-numpy-scipy
      PUSH: false
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check for Dockerfile changes
        uses: jitterbit/get-changed-files@v1
        id: changes
      - name: Build and push
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ${{ env.DOCKER_FILE }}
          tags: ${{ env.DOCKER_IMAGE }}
          push: ${{ env.PUSH }}
          cache-from: env.DOCKER_IMAGE
      - name: Image digest
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        run: echo ${{ steps.docker_build.outputs.digest }}

  sklearn:
    needs: scipy
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMAGE: verificarlo/fuzzy:v0.4.1-lapack-python3.8.5-numpy-scipy-sklearn
      DOCKER_FILE: ./docker/level4/Dockerfile.ubuntu20.04-python-numpy-scipy-sklearn
      PUSH: false
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check for Dockerfile changes
        uses: jitterbit/get-changed-files@v1
        id: changes
      - name: Build and push
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ${{ env.DOCKER_FILE }}
          tags: ${{ env.DOCKER_IMAGE }}
          push: ${{ env.PUSH }}
          cache-from: env.DOCKER_IMAGE
      - name: Image digest
        if: contains(steps.changes.outputs.all, 'Dockerfile')
        run: echo ${{ steps.docker_build.outputs.digest }}

